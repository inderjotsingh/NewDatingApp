dotnet new sln
dotnet new webapi â€“o API
dotnet sln add API

Open VS Code

cd API
dotnet run / dotnet watch run (like nodemon)
dotnet dev-certs https --trust

Create new folder "Entities" and create class AppUser

DbContext: Acts as a bridge between domain and database. 
Primary class to interact with database.

Entity Framework features:
- Querying through Linq
- Change Tracking
- Saving to database
- Concurrency
- Transactions
- Caching  (Repeated query will fetch data from Cache and not from database)
- Build In Concentions
- Configurations
- Migrations

Install Nuget Galery from Extensions

Ctrl + Shift + P: Open Commands: Search Nuget Gallery
In Nuget Gallery, seach Microsoft.EntityFrameworkCore.sqlite. choose your .net code version and tick on checkbox and install.
You can choose sql server also if you are using sql server.
Check API.csproj

Adding DbContext File:
Create folder Data.
Create DataContext.cs file

Create contructor.
create property of type DbSet<AppUser> along with name of table 

In Startup.cs file, under ConfigureServices, Add DbContext and provide connection string

Creating Connection String:
In appsettings.Development.json, enter your connection string and give the name of connection string (DefaultConnection) in startup.js file

in DatingApp->API folder, write following command to introduct Migrations
- dotnet ef migrations add InitialCreate -o Data/Migrations

In error occurs regarding Microsoft.EntityFrameworkCore.Design package...install this package from Nuget Gallery as mentioned above.

A new folder Migrations in Data folder has been created with 2 methods: Up and Down

To create the database, write following command in API folder:
- dotnet ef database update

Check database. 2 tables are created in DateingApp database: __EFMigrationsHistory and Users

----------------------
Adding new Controller:
----------------------
In controller folder, create new class named UsersController.cs and derive ControllerBase class
Using Linq we can fetch data from Database and use postman to check our api. 

--------
GIT
--------
- Install Git in your system and sign up for GitHub
- Open Git Bash.
- Run following command to initialize git in your project
    - git init (A new hidden folder in created in your project)
    - dotnet new gitignore  (Ignore files from posting to git hub)

In .gitignore file, at the end, make an entry for "appsettings.json". As this file contains keys, git will not post this file to github.

Open Source Control (Ctrl + Shift + G).
Click on "+" sign. Enter remarks above.
Click on "..."->Commit->Commit

If error occurs, open Command Prompt and run following commands in C:\Program Files\Git\bin:
- git config --global user.email "inderjotsingh27@gmail.com"
- git config --global user.name "Inderjot Singh"

In github website, create new repository. You can either make it public or private.

execute following command (received from github website):
- git remote add origin https://github.com/inderjotsingh/NewDatingApp.git
- git push -u origin main  (It will ask for authorization)

-----------------------------------------------ANGULAR------------------------------------------------
Install latest version of angular CLI using following command:
- npm i -g @angular/cli
- ng new client (To create a new angular project)

Structure Directives: (Eg: *ngFor): Modifies the domain objects model (DOMs) in HTML
Install Angular Bootstrap using following command:
- ng add ngx-bootstrap

Install Font-Awesome using following commmand:
- npm install font-awesome

Using HTTPS in Angular

Password Storing:
- Add PasswordHash and PasswordSalt byte[] in AppUser class.

To add these new properties in database, use following migration commands to update database:
- dotnet ef migrations add UserPasswordAdded
- dotnet ef update database                 -- To update database

Inheritance:
When we inherit from another C# class, we get all it attributes, methods and properties available 
in the class from which it is inherited.
We created BaseApiController.cs controller and added 
- [ApiController]
- [Route("api/[controller]")]
in it. In UsersController.cs, we are not inheriting ControllerBase class but our newly created class named BaseApiController.
With this we don't need to add [ApiController] and [Route("api/[controller]")] in all our controllers.

DTOs:
--------
Purpose:
- In case we get result and as AppUser class contains password information, we can't send full class to the front end.
So we use DTO to hide certain properties and send that DTO to front end.
- Flaten objects inside our code if we have nested objects
- Relationship between classes
- To receive properties inside our route through body.

Validations should be implemented in DTOs.

CREATE TOKEN:
-----------------
- From nuget gallery, install "System.IdentityModel.Tokens.Jwt", "Microsoft.AspNetCore.Authentication.JwtBearer" into the project.
- Create and interface named "ITokenService" and declare a string property "CreateToken" which will return AppUser Object.
- Create a class named "TokenService.cs" and generate a constructor. Using "SymmetricSecurityKey" class (required 
to specify that same key will be used for encrtyption and decryption), fetch the key from appsettings.Development.json file.
- We need to define the function which was created in interface named "CreateToken" and we will pass AppUser as input parameter.
- In this function, we need to specify list of claims. We need to specify the key-value pair with which we will pass the required
data. Eg. "JwtRegisteredClaimNames.NameId" is key through which we can get the Username(user.UserName).
- Next, we need to encrypt the token with a signature.  To do that we need to specify the algorithm. so in following line of code, 
we are encrypting the key with HmacSha512 algo. 
var creds = new SigningCredentials(_key, SecurityAlgorithms.HmacSha512Signature);
- In the next line of code, we are specifying token descriptor and providing details of token such as claims, expiry time and 
signing credentials.
var tokenDescriptor = new SecurityTokenDescriptor
{
    Subject = new ClaimsIdentity(claims),
    Expires = DateTime.Now.AddDays(7),
    SigningCredentials = creds
};
- Next we create an object of JwtSecurityTokenHandler class. 
- Using CreateToken method of JwtSecurityTokenHandler class, we pass the tokenDescriptor object and it provides us 
the generated token.
- Using WriteToken method, the token is sent back.

VALIDATE TOKEN:
--------------
- As we need to authenticate the token coming from client application, we need to add code in startup.cs as middleware.
- In startup.cs file, under ConfigureServices method, we write following line of code.
services.AddScoped<ITokenService, TokenService>();
This specifies that the scope of token which is being passed is to be maintained only until it is being used.
and we input ITokenService, TokenService.
- As we are using JWT Bearer for generating token, we need to write following line of code. 
 services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options => {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["TokenKey"])),
            ValidateIssuer = false,
            ValidateAudience = false
        };
    });
In this, we are specifying to add authentication of JWTBearer type with following options:
            - ValidateIssuerSigningKey
            - IssuerSigningKey
            - ValidateIssuer
            - ValidateAudience

- To tell the project that Authentication needs to be performed, in "Configure" method, under app.UseCors, write following
code: 
    app.UseAuthorization();
    Please note it must come after app.UseCors and before app.UseAuthorization();

- In controllers, add [Authorize] above each route which needs to be authenticated.
--------------------------------------------------------------------------------------

Extension Methods: Enable us to add methods to existing types without creating or modifying original types.
We create folder named "Extensions" and 2 classes named ApplicationServiceExtensions.cs and IdentityServiceExtensions.cs
Move code to these files from startup.cs file

---------------------------------------END OF SECTION 4-----------------------------------

ANGUALR SECTION:
----------------
To create a component/services without .spec file, use following command:
- ng g c <component_name> --skip-tests
- ng g s <service_name>  --skip-tests

SERVICES:
----------
@Injectable: This service can be injected into other component/services in our application. 
        providedIn: 'root' = We don't need to put the service in app.module->providers section. In older version of angular,
        we were required to specify services in this section.

Observables: 
-------------
It does not do until we subscribes. New standards for managing async data included in ES7. Introduced in Angular v2.
You can think of observables like a newsletter:
    - Only subscribers of newsletter receives the newsletter.
    - If no-one subscribes to the newsletter, it probably will not be printed.

Promises Vs Observables:
Promises: Provides a single future value. It waits until the response is received.
Observables: Emits multiple values over time.

Promises: Not Lazy
Observables: Lazy

Promises: Can not cancel
Observables: Able to cancel

Observables: can use with map, filter, reduce and other operators.

To transform the data received from the Http request, we can use RxJS's pipe.
Eg: 
getMembers() {
    return this.http.get('api/users').pipe(
        map(members => {
            console.log(member.id);
            return member.id
        })
    )
}

There are 3 parts of Observables:
- subscribes
- error eg: error => {}
- On Completion eg: () => {}

Async Pipe:
<li *ngFor='let member of service.getMembers() | async'>{{member.username}}</li>
Async Pipe automatically subscribes/unsubscribes from the observables


BsDropdownModule.forRoot() (app.module) :  it got some services or components that it needs to initialize along with root module.

Passing Data from Parent to Child:
- In clild component, we use @Input that will receive data from Parent component.
- To pass data, in Parent Component HTML, we use (square brackets) [@InputNameFromChildComponent].

Passing Data from Clild to Parent:
- We can pass data from Child component that will change the property of Parent component.
- In child component, we use @Output that will pass data to Parent component. It is an event emitter.
- To received data, in Parent component HTML, we use (simple brackets) (@OutputNameFromChildComponent)
